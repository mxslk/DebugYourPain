[{"id":0,"href":"/docs/main_posts/understand/principles_of_pain/","title":"Four Principles of Pain","section":"Understand","content":" Four Principles of Pain # Minimum viable knowledge for working with pain.\nI. Pain is not a measure of damage # Most of us naively equate pain with tissue damage. The most common view is that pain is the body\u0026rsquo;s perception of damage. \\[ \\text{Tissue damage} \\rightarrow \\text{Pain receptors fire} \\rightarrow \\text{Experience of pain} \\] \\[ \\text{or} \\] \\[ \\text{Tissue damage} \\implies \\text{Pain} \\] This is why if you go into a doctor\u0026rsquo;s office reporting back pain, they will often image your spine for abnormalities (e.g. herniated disk or spinal stenosis)1. They can then attempt try to fix these abnormalities via surgery or, failing that, give you painkillers to manage the pain.\nUnfortunately, this model is too simple. Pain does not strictly imply damage:\nMany people have damage without pain.\nMost pain-free people have some degree of spinal, hip, shoulder, and knee \u0026lsquo;abnormalities\u0026rsquo;.\nIn a famous 1994 study, MC Jensen et al. examined the MRI images of the backs of 98 pain-free people. Of the participants, aged twenty and older, over half had an abnormality (\u0026ldquo;damage\u0026rdquo;) in at least one disk2. Herniation or disk bulges were strikingly common in patients who were pain free.\nMany follow up studies have replicated this. It is very common for pain-free people have structural damage in their hips, shoulders, and knees. For instance:\nRajaswaran et al (2014) found spinal abnormalities (synovial cysts, disc degeneration and arthropathy) in 96% of pain free young athletes. Tresch et al (2016) found defects in the hip cartilage of 57% of pain-free 20-50 year olds. Templehof et al (1999) saw full rotator cuff tears in 23% of people reporting no pain. Many people have pain without damage.\nIf you have a limb amputated, there\u0026rsquo;s about a 80% chance that you begin to feel major pain at the periphery of the amputed limb, years after the tissue around the limb has fully healed 3. People who experience this describe with incredible specificity the burning or shooting pains in their missing hands and feet. Although their tissue is not damaged, the pain is certainly real — the firsthand accounts are particularly convincing3.\nMany forms of chronic pain are also associated with no tissue damage. The World Health Organization estimates that over 550 million people are affected by lower-back pain that can\u0026rsquo;t be explained by a disease or structural abnormality 4. Other examples of chronic pain with no associated damage include fibromyalgia 5, Irritable Bowel Syndrome, and many others.\nThere is more to pain than physical damage.\nII. Pain is a generated signal for protective action # If it\u0026rsquo;s not just a measure of physical damage, then what is pain?\n\\[ \\text{Pain is a generated signal for protective action} \\] How did pain evolve?\nThe neural circuitry for responding to harm evolved around 600 million years ago, in our great ancestor — the bilateral worm. It was a protective instinct responding to external stimuli; If poked, the worm would retreat6.\nInitially, it was all instinct. Pain wasn\u0026rsquo;t \u0026lsquo;unpleasant\u0026rsquo; because worms didn\u0026rsquo;t have the neural tissue for feelings. It was only much later, with the development of structures like the limbic system, that our ancestors began to have the unpleasant feelings that we would recognize as pain.\nThe purpose of pain is to get you to act.\nSay you\u0026rsquo;re cooking later today and accidentally touch a burning stove. What do you do? You whip your hand away from the stove. You might cool it down under running water, and then you\u0026rsquo;ll keep it close to your body.\nThe pain hurts so that you move to safety. So you protect your hand from further damage. If the pain is bad enough, you\u0026rsquo;ll also learn to be more careful around stoves, and you might even be afraid of frying things.\nPain is a learning signal your nervous system generates for protective action. With it, you protect your hand, and avoid future situations where your hand is at risk.\nPain is generated from past experience\nAs with all signals that our body generates, it is heavily informed by past experience.\nYou can naively think about our experience as an integration of sensory stimuli and our expectations.\nThree Views on Pain # In more detail, here are three ways of understanding pain\nEvolution Evolutionary Biology # Pain as a learning signal for protective action.\nPain, from an evolutionary standpoint, represents a highly conserved biological mechanism that has undergone significant refinement over millions of years. Its origins can be traced back to primitive nociceptive reflexes in early bilateral organisms, evolving into the sophisticated, multi-layered experience observed in humans. This phylogenetic progression reflects the adaptive value of pain in promoting survival behaviors and reproductive fitness. The modern human pain experience, with its complex sensory, emotional, and cognitive components, is the result of successive evolutionary adaptations, each building upon earlier protective mechanisms to create a nuanced system for threat detection and response.\nComputation Computational Neuroscience # Pain as a bodily inference that integrates prior experience, present sensory data, and the current context.\n\u0026ldquo;In individuals with chronic pain harmless bodily sensations can elicit anticipatory fear of pain resulting in maladaptive responses such as taking pain medication. Here, we aim to broaden the perspective taking into account recent evidence that suggests that interoceptive perception is largely a construction of beliefs, which are based on past experience and that are kept in check by the actual state of the body. Taking a Bayesian perspective, we propose that individuals with chronic pain display a heightened prediction of pain [prior probability p(pain)], which results in heightened pain perception [posterior probability p(pain|sensation)] due to an assumed link between pain and a harmless bodily sensation [p(sensation|pain)]. This pain perception emerges because their mind infers pain as the most likely cause for the sensation. When confronted with a mismatch between predicted pain and a (harmless bodily) sensation, individuals with chronic pain try to minimize the mismatch most likely by active inference of pain or alternatively by an attentional shift away from the sensation.\u0026rdquo;\nHechler, Tanja, Dominik Endres, and Anna Thorwart. \u0026ldquo;Why harmless sensations might hurt in individuals with chronic pain: about heightened prediction and perception of pain in the mind.\u0026rdquo; Frontiers in psychology 7 (2016): 1638.\nComplexity Complexity theory (and enactivism) # Pain as an experience that arises at the intersection of environmental, social, biological, and psychological factors.\nComplexity theory offers a paradigm for understanding pain as an emergent phenomenon arising from the nonlinear interactions within a complex adaptive system. This approach acknowledges the multifaceted nature of pain, incorporating biological, psychological, and social dimensions. Pain is viewed not as a simple input-output process, but as a dynamic state emerging from the intricate interplay of multiple factors across various scales of organization. This perspective emphasizes the potential for small perturbations in one component of the system to lead to disproportionate effects on the overall pain experience, highlighting the limitations of reductionist approaches and the necessity for holistic, multidimensional strategies in pain management and research.\nIII. Pain is made of thoughts, emotions, and sensation # One very helpful way of decomposing pain is into a cognitive component (\u0026ldquo;My back is broken\u0026hellip; am I ever going to fix it\u0026rdquo;?), an emotional component (the unpleasantness of the feeling), and a sensory component (the numb tingling around the lower back).\nThese aspects of pain mutually reinforce each other. Catastrophic thinking can lead to more fear, which heightens the interpretation of the sensation. By recognizing the pain feedback loop and its components, we can often times resolve the pain.\nIV. You can change your pain response # The human brain is capable of incredible adaptation. Blind people can learn to \u0026lsquo;see\u0026rsquo; through stimulation on their tongue or echo-location by clicking noises. Stroke survivors who can\u0026rsquo;t read, speak, or remember can recover and go on to become successful scientists. Severe epileptics can lose the left half of their brain and eventually walk, talk and go to school.\nThese examples of neuroplasticity demonstrate that our brains can rewire themselves in response to drastic changes. This same plasticity applies to how we process and experience pain. Just as our brains can adapt to loss of sight, they can also learn to recalibrate pain.\nThere are randomized clinical trials and thousands of anecdotes demonstrating that you can permanently resolve pain through noninvasive procedures7.\nThere\u0026rsquo;s no reason a priori that any nervous system cannot recalibrate and resolve the patterns that generate pain. The only question is which stimuli and adjustments will work.\nIf you want to jump right into working with pain, go to Pain Debugging Protocol. If you have a bit more time for a story, go ahead to Debugging RSI.\nDownie, Aron, et al. \u0026ldquo;How common is imaging for low back pain in primary and emergency care? Systematic review and meta-analysis of over 4 million imaging requests across 21 years.\u0026rdquo; British journal of sports medicine 54.11 (2020): 642-651.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nJensen, Maureen C., et al. \u0026ldquo;Magnetic resonance imaging of the lumbar spine in people without back pain.\u0026rdquo; New England Journal of Medicine 331.2 (1994): 69-73.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nE.g. \u0026ldquo;‘To anyone looking at me, I have no arm. But I can feel the entirety of my phantom hand and arm. Imagine you are wearing an elbow length evening glove … everywhere the glove touches your skin it’s crushing your arm constantly. … On top of it you get pains like burning pains. It’s like when you burn yourself on the grill. Your instinct is to pull your hand away, but with this pain you can’t. It\u0026rsquo;s a nerve sensation and it stays there, until “it” decides to pull away’.\u0026rdquo; Makin, Tamar R. \u0026ldquo;Phantom limb pain: thinking outside the (mirror) box.\u0026rdquo; Brain 144.7 (2021): 1929-1932.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee https://www.who.int/news-room/fact-sheets/detail/low-back-pain; They estimate 90% of the reported 619 million of people with lower back pain have nonspecific back pain. This 550 million is probably an underestimate.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee Clauw, Daniel J. \u0026ldquo;Fibromyalgia: a clinical review.\u0026rdquo; Jama 311.15 (2014): 1547-1555.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee Smith, E. S., \u0026amp; Lewin, G. R. (2009). Nociceptors: a phylogenetic view. Journal of Comparative Physiology A, 195(12), 1089-1106.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRCT examples: Ashar, Yoni K., et al. \u0026ldquo;Effect of pain reprocessing therapy vs placebo and usual care for patients with chronic back pain: a randomized clinical trial.\u0026rdquo; JAMA psychiatry 79.1 (2022): 13-23.; Donnino, Michael W., et al. \u0026ldquo;Psychophysiologic symptom relief therapy for chronic back pain: a pilot randomized controlled trial.\u0026rdquo; Pain Reports 6.3 (2021): e959. Anecdotes: Patrick Collison: https://x.com/patrickc/status/1559737765566173185;Aaron Iba: https://aaroniba.net/how-i-cured-my-rsi-pain; Josh Comeau: https://x.com/JoshWComeau/status/1379438688602570753; People have cured their pain just by reading Amazon reviews of Sarno’s book: https://x.com/visakanv/status/1652574276531412992\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":1,"href":"/docs/main_posts/understand/debugging_rsi/","title":"Beyond the Wrist: Debugging RSI","section":"Understand","content":" Beyond the Wrist: Debugging RSI # This is a personal essay about a period of major suffering from chronic pain I went through, and how I acquired the knowledge and skill to eventually lift me out of it.\nA fire burning # I am about to give up. My eyes are bleary after four days of staring at numpy arrays. I want to smash my keyboard and throw it out into the snow, but I have promised myself that I will fix this bug by the end of the week.\nBesides a dull headache, I feel the usual ache in my wrists. This time, though, my forearms are also hurting. A dull heat rises from my wrists to the soft muscle below my elbow. Another half hour of coding, the pain in my wrists becomes sharper. So I stop for the day, knowing that my wrists will be back to normal enough to fix this problem tomorrow. Or so I think.\nAs a grad student in CS, I code a lot, so make sure to have good postural and ergonomic hygiene. I use a Microsoft Sculpt keyboard, hotkeys to minimize mouse use. My wrists are neutral and my screen is at head height. It more or less keeps various aches at bay.\nThe next morning, wrists sore, I begin to type, and within fifteen minutes, the dull heat in my forearms becomes hot. My fingers become stiff; my typing slows to a crawl. My hands feel like they have been submerged in snow – cold, inflexible, useless.\nIn the doctor’s office, I explain the situation:\nMe (suppressing panic, explaining the situation): What’s going on?\nDoctor: You have tendonitis or a repetitive strain injury — the tendons in your hand are inflamed from overuse.\nMe: You’re saying my hand is damaged from me typing too much? But I’m actually typing less than I was last semester.\nDoctor (shrugging): To be honest, we don’t really know what’s going on. But you should see a physiotherapist. It’s up to you, but here’s a referral slip.\nThe physiotherapist tells me my muscles are imbalanced — some auxiliary muscles need strengthening. She gives me wrist exercises.\nI am confused. Last semester I was spending twice the time typing than I am now. Also, before this flare up, I could do pull-ups just fine. Muscle and tendon weakness can’t be the cause.\nFour weeks later and it’s even worse. I’m using my forearms to open doorknobs, eating frozen meals because I can’t chop vegetables, and wondering if I have to use voice dictation software for the rest of my life. I move between fear and anger as my waking states.\nI start looking for solutions and order a dozen pop-sci books about chronic pain, and start doing a literature review:\nA couple books in, it hits me: I, the doctor, and the physiotherapist are all working at the wrong level of abstraction.\nOf course we could look at the pain at the level of my extensor carpi radialis, but what becomes blindingly obvious is that pain is complex and distributed. There is no pain center in the brain 1. Everywhere from the somatosensory cortex to the amygdala to the vagus nerve to nociceptors in our skin is involved in the unpleasant experience we call pain.\nI began to suspect that my situation was more like a software problem than a hardware problem. Rather than any part of my wrist or forearm having structural damage, my pain was a prediction system gone awry.\nAfter doing five hours of exercises that looked like they had nothing to do with my wrists — there was a major shift. Though I still felt sharp in my wrist, my forearm was down to a low burn. Three months later, and I was doing pull-ups and typing again — no sharpness, no burn, nothing.\nThe rest of this post is about the mechanism of pain that I uncovered and what I did to become functional again.\nUnderstanding pain as inference # Disclaimer: There is a lot that we don\u0026rsquo;t understand about pain. The account I’m about to give is a broad overview of the features of pain consistent with the literature on the neuroscience of pain. I cite the relevant resources that have contributed to this impression at the bottom.\n1. The old account: pain as measure of damage # Both the physiotherapist and the doctor told me to rest my wrist. Why? Because they believed that my pain was from a wrist that was inflamed and damaged by continued activity. ‘Repetitive strain injury’ as a diagnosis implies that it is the repetitive motion that is causing damage and therefore pain.\nTheir model was something like:\nTissue damage → Nociceptors response → Experience of pain \\[ \\text{Tissue damage} \\rightarrow \\text{Pain receptors fire} \\rightarrow \\text{Experience of pain} \\] \\[ \\text{thus} \\] \\[ \\text{Pain} \\implies \\text{Tissue damage} \\] Logically, the available treatments become either \u0026lsquo;fixing\u0026rsquo; the tissue damage by doing wrist exercises to ‘balance’ the muscles in my forearm, or taking an NSAID like Advil to chemically inhibit the nociceptive response.\n2. Cracks in the model # This didn’t make sense in light of my experience. Some days I had fairly little pain while other days it was debilitating — but I was keeping them in wrist braces and minimizing use on both days. It would be very strange if it was increased damage that was causing more pain. Also, I noticed that the location would shift slightly. Some days it would radiate more up my forearms while other days it would center around my wrists. How could the sensation be changing if it was just from tissue damage?\nAs I started to explore the literature more, I saw that it also didn’t make sense with other people’s experiences:\nPeople had pain with no damage People who have had limbs amputated often report intense pain in the absent limb. The pain is usually intermittent, and is often vividly described as throbbing, stabbing or burning. They are able to distinguish between pain at the stump, and pain within the missing limb itself. In this case, there is no tissue damage in the absent limb, yet there are recurring episodes of pain long after the wound has healed. Emotional pain: whether the death of a loved one, or heartbreak, some of the most painful experiences we go through involve no physical damage. People had damage with no pain Henry Beecher, an anesthesiologist on the battlefield of the Anzio Beachhead in Italy during WWII, found an astounding lack of reported pain among severely wounded soldiers. He surveyed the reported pain intensity of 215 lucid men that had penetrating wounds in the head, chest, or stomach, compound bone fractures, or extensive soft-tissue wounds. Three-quarters of the soldiers with severe wounds had so little pain that they refused pain relief medication2. 3. Pain is prediction of future damage # Here\u0026rsquo;s a more useful account of pain.\nBrains evolved in multicellular organisms because they could predict the needs of other organ systems and take action to keep the organism alive.\nIt’s why your thirst is quenched within thirty seconds of drinking water even though it takes thirty minutes for your small intestine to reabsorb it. It’s also why you salivate when just smelling food as you pass by, or start to shiver in the cold even when your core body temperature hasn’t dropped.\nPain is a signal for protective action. Not a damage meter. When we touch a hot stove, we yank our hand away — often quick enough to avoid any damage. If our hand is burned, we keep it close to our body, away from accidental bumps that might damage it.\nIt\u0026rsquo;s worth remembering that the brain is a folded sack of flesh sealed in thick bone box. And that it understands basically everything through pipes that carry chemicals and digital signals. There is no such thing as \u0026lsquo;ground truth\u0026rsquo; to the brain, so it has incorporate different signals to make predictions.\nOur brains use many different signals to make predictions. One of the most highly weighted signals is fear. You\u0026rsquo;ve felt this if, stepping out of a scary movie, you were startled by the shadow of some harmless pedestrian. Or if you\u0026rsquo;ve gotten an injection in a strange foreign office where the nurse is mean, and then another where she/he is chatting with you and you\u0026rsquo;re relaxed — it literally hurts more when you\u0026rsquo;re scared.\n4. My pain prediction system was miscalibrated # So what was going on with my wrist pain? Basically, the intensity and stress with which I was coding contributed to initial sensation in my forearm. But then there was a vicious feedback loop.\nBecause I interpreted the pain as “something wrong with me”, I became more afraid when my wrist hurt, which then amplified the pain. This repeated until it became debilitating for me.\nA simplified version of what was going on:\nMy pain system was miscalibrated to the environment. It was predicting future damage, fed by stress and the fearful belief that “something is wrong with my wrist”, even though my wrist was structurally fine.\nRecalibrating my pain system # The understanding alone decreased my pain.\nComing to internalize that pain is not damage and that my wrist was not in danger, made a big difference. Once upon a time, I would have doubted that a change in my beliefs could change something as intimate as my experience of pain. But the experience was undeniable — and made sense in context of the predictive brain.\nThe internalization happened over many different resources. Papers3, books4, videos5, conversations with a neuroscience professor. The books and lectures tend to be helpful in tone, but have models that I think are outdated or imprecise; the papers are precise enough but hard to internalize emotionally.\nI would say this brought me ~50% towards resolution.\nShifting from a default stress-fear state\nMany different approaches worked for me through different periods of time. I initially looked very briefly at the literature comparing different treatments for chronic pain, and concluded that I would learn far more from just experimenting by myself. I\u0026rsquo;m very glad that I did.\nAt the beginning, I played around with something like a combination of Focusing and IFS-like practices. Then, I found Pain Reprocessing Therapy, which basically works by shifting priors through gentle awareness exercises[6]. They don’t use the language of predictive processing, but I found PP a better frame than their own to understand their proposed practices of “somatic tracking” and “positive affect induction”.\nI did these awareness exercises on my own, and eventually went through their certification program to teach PRT, which improved my own ability to do the exercises.\nThese got me another 40% to resolution.\nAt this point, I was actually better than before the first spreading of heat into my forearms.\nThe last 10% was from gradually finding the tasks that would trigger pain, and doing them from a calm place until I could do them consistently while staying calm.\nA high level model of what happened\nMy model of what happened is something like this: initially, my brain had a strong prior of my wrists being damaged, which influenced lower level predictions of pain (and thus experiences of pain) during periods of extended usage. This prior was reinforced by the fear and stress associated with the pain, creating a feedback loop that led to higher precision (certainty) for these pain predictions for longer periods.\nNew information (\u0026ldquo;your wrists might not be damaged\u0026rdquo;) shifted my higher-level priors, which also decreased the lower level predictions of pain, stopping that feedback loop. Still, the emotional state of stress and fear were persistent, and doing the Focusing/PRT relaxed my nervous system and also decreased the low level pain priors. It is also consistent with the model proposed by Hechler et al. (2016) I reference below.\nI am confident this explanation is directionally correct, based on my direct experience. I went from having fingers that would visibly seize up when trying to type, to being able to play guitar and chop vegetables without pain.\nWhile it might seem like regression to the mean or some other physiological shift could explain my recovery, what solidifies my confidence in the feedback loop model is the real-time changes I observed. Within a single day, I could sense the pain changing as I performed an exercise. As I made this a habit, it became increasingly clear that a process similar to what I\u0026rsquo;ve described above was taking place. This immediate and consistent correlation between my mental exercises and pain levels strongly suggests that the mechanism was more than just natural healing or coincidence.\nI was convinced that this was not uncommon from conversations with two friends who went through a similar arc, and the thousands of testimonials of people online who had their wrist pain resolved through similar means. I\u0026rsquo;m now in the process of formalizing this intuition and writing it up.\nIt\u0026rsquo;s now been a couple years since the incident, and I\u0026rsquo;ve had one mild episode of pain where I paused from playing the piano for a week — but otherwise my wrists have been happy and healthy.\nI\u0026rsquo;m not suggesting that what I did will work for everyone. But, given the low monetary cost and risk of harm, and fairly high upside — I think some experimentation in this vein is at least something to seriously consider.\nQuick note on possible risks: I have not heard of people worsening their pain condition through any of the exercises I described above. Perhaps the worst outcome would be not going to the doctor when you have a malignant tumor on your wrist, or a fractured bone. I\u0026rsquo;m not discouraging normal medical attention.\nAcknowledgements\nI want to thank the generation of pain researchers that laid the groundwork for this understanding. Even as some of their theories have been superseded, pioneers like George Engel, John Sarno and Ronald Melzack created the foundational building blocks for discussions like this to happen. Also to Professor Fan Wang for her mentorship and support.\nPostscript # Since my recovery, it\u0026rsquo;s become clearer to me that processing your own pain is a learnable skill. I\u0026rsquo;ve since had the opportunity to teach several people this skill, using my own idiosyncratic interpretation of pain reprocessing therapy (PRT). This has led me to believe that there\u0026rsquo;s room to refine and improve the efficacy of existing techniques.\nEDIT: I\u0026rsquo;m running a live course teaching you these skills starting mid-November.\nContinue reading at Pain Debugging Protocol\nReferences:\nSee the discussion of the ‘neuromatrix’ in Melzack, Ronald. \u0026ldquo;Pain and the neuromatrix in the brain.\u0026rdquo; Journal of dental education 65.12 (2001): 1378-1382.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBeecher, Henry K. \u0026ldquo;Pain in men wounded in battle.\u0026rdquo; Annals of surgery 123.1 (1946): 96. The study is not perfect, but for my purposes it holds true.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHechler, Tanja, Dominik Endres, and Anna Thorwart. \u0026ldquo;Why harmless sensations might hurt in individuals with chronic pain: about heightened prediction and perception of pain in the mind.\u0026rdquo; Frontiers in psychology 7 (2016): 1638.; Büchel, Christian, et al. \u0026ldquo;Placebo analgesia: a predictive coding perspective.\u0026rdquo; Neuron 81.6 (2014): 1223-1239.; Stilwell, Peter, and Katherine Harman. \u0026ldquo;An enactive approach to pain: beyond the biopsychosocial model.\u0026rdquo; Phenomenology and the Cognitive Sciences 18.4 (2019): 637-665.; Ashar, Yoni K., et al. \u0026ldquo;Effect of pain reprocessing therapy vs placebo and usual care for patients with chronic back pain: a randomized clinical trial.\u0026rdquo; JAMA psychiatry 79.1 (2022): 13-23.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nButler, David Sheridan, and G. Lorimer Moseley. Explain Pain 2nd Edn. Noigroup publications, 2013.; Hargrove, Todd R. \u0026ldquo;A guide to better movement: the science and practice of moving with more skill and less pain\u0026rdquo;. Better Movement, 2014.; Zoffness, Rachel. \u0026ldquo;The pain management workbook: Powerful CBT and mindfulness skills to take control of pain and reclaim your life\u0026rdquo;. New Harbinger Publications, 2020.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSchubiner lecture, rambling but convincing (to me) testimonial, (see the various thumbnails from these videos)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":2,"href":"/docs/main_posts/events/lab_hours/","title":"Open Lab Hours","section":"Docs","content":" Open Lab hours # Lab hours are a container for different experiments we want to run related pain. One session might be exploring a new theory of how awareness modulates pain. Another might be a new movement game we want to test.\nOur next open lab will be October 24th at 3pm EST. Join here.\nConsider staying up to date via our newsletter.\n"},{"id":3,"href":"/docs/main_posts/practice/pillars_of_practice/","title":"Pain Debugging Protocol","section":"Practice","content":" Pain Debugging Protocol # Foundational skills for debugging pain.\nThis page is about giving you a structure for debugging pain. Debugging pain is not unlike other forms of debugging1. Although there are generally helpful rules of thumb, there is no perfect recipe that works for everyone. You will need to understand the architecture of the system. You will need to tinker, sometimes randomly, and pay close attention to how the system responds.\nThis protocol brings together a few high leverage principles that have been helpful in our own experience and our experience in helping others. It distills principles common to many techniques that aim to address pain and thus \u0026lsquo;sits atop\u0026rsquo; them. We encourage you to view this as a meta-protocol that informs how you go about trying more specific practices, whether that be Pain Reprocessing Therapy or Qigong.\nRule out structural damage before you begin # Prior to beginning this protocol, it\u0026rsquo;s important to consider whether your condition might be closely linked to tissue damage. Although the majority of chronic pain is not directly linked to tissue damage, you may be in the minority of cases where a structural intervention is the most helpful (for instance, inflammatory pain associated with a cancerous tumor). It is very valuable to consider the doctor\u0026rsquo;s assessment in light of your own hypothesis. You can combine this with the assessment criteria used in Pain Reprocessing Therapy.\nNevertheless, even for people who have clearly associated tissue damage, this protocol should be helpful in association with other forms of treatment.\n0. Set up your environment # This is about preparing a space for the work to happen. It includes both your internal environment (your mindset) as well as your physical environment (your workspace) and your habits.\nFor your mindset:\nYou are the solution architect. Your life is in your hands. You cannot rely on a magical device, technique, or healer. Bring your utmost care and creative problem solving ability to this and you will be richly rewarded.\nProgress is often nonlinear. While our muscles and tendons can be understood with linear mechanics, our brains and nervous systems cannot. This means that results can be highly nonlinear. For some people, complete resolution can happen in days. For others, it can take much longer. Be open to either, while also accepting that day to day progress can vary significantly.\nBe kind to yourself. Many people experiencing chronic pain have strong perfectionist tendencies. Self-criticism tends to be associated with an activated sympathetic nervous system and reinforce the pain catastrophizing feedback loop. Accepting and forgiving yourself is very helpful. More on this in Process Your Patterns below.\nFor your physical environment and habits:\nMake a calm space, free of distractions. Somewhere you won\u0026rsquo;t be bothered by pets or other people. Lighting a candle can serve as a helpful symbol that you are going to begin.\nMake your work less stressful. If you take this process seriously, it will be your most important part-time job. Rearrange your work around this, not vice-versa. It is hard to make meaningful progress if you go to sleep dreaming of that project you should have finished by now.\nDedicate \u0026gt;30mins at a consistent time each day. Ideally first thing in the morning.\nStabilize diet, sleep, and exercise. Not much more than the obvious.\n1. Understand Pain # As we\u0026rsquo;ve discussed, pain is partly made of thoughts. How we understand pain greatly affects how we perceive it. During a workout, we might willingly put ourselves through significant pain. We intuitively understand that this pain is safe, and so it isn\u0026rsquo;t a problem even when we wake up bruised and sore the next day. We want to internalize something similar when it comes to chronic pain. At first the understanding may be purely conceptual but you should deepen this understanding until it feels clear that the pain is not due to damage and that you know how to work with the pain.\nPrompts:\nStart logging: Start a pain doc that gathers the evidence about pain in your context and start keeping track of what you have attempted. Be empirical about it: write down what you think is happening with your pain, perform little experiments, and refine your hypothesis. Gather intel: See the evidence page and explore, following your curiosity. Use this to inform your hypothesis of what\u0026rsquo;s going on. Rubber ducking: Articulate what you think is going on with your pain. What parts are you less sure about? Keep refining until it feels clear in light of the evidence we\u0026rsquo;ve presented Find your \u0026lsquo;proof of concept\u0026rsquo;: there are thousands of testimonials from different types of people with different conditions. Once you find someone who has recovered who you can relate to, recovery becomes more real. 2. Process Your Patterns # The patterns that generate pain are often rooted in the past. These are forms of technical debt that were once but no longer useful.\nIt may have been once helpful to suppress anger to avoid fights in middle school, but at the workplace anger suppression may be directly linked with chronic muscle tension. Processing past patterns is often very helpful for addressing chronic pain.\nProcessing the past includes many different sub-skills\nRelaxing the nervous system. Just as a strange shadow is far more terrifying right after a scary movie, your bodily sensations are more painful when your sympathetic nervous system is constantly activated. Similar to developer mode on an operating system, relaxing the nervous system allows you to experiment and problem solve in a way that you usually cannot. You may have to experiment to find the practice that works well for you. Breathwork, Progressive Relaxation, and even Tapping have been helpful for people.\nImproving interoception. Interoception is the ability to notice internal sensations. Getting better at interoception allows us to update our internalized beliefs about the pain. A very powerful practice for this is Somatic Tracking [cite: as developed and described in Pain Reprocessing Therapy], in which you gently inquire into the pain sensations. If you are able to notice the sensation aspect of the pain in a nonjudgemental way, the fear-catastrophizing loop is interrupted, and the pain\nFeeling emotions. As we\u0026rsquo;ve mentioned, pain has a cognitive, an emotional, and a sensation component. The emotional component of chronic pain is often highly charged when emotions are repressed for a long period of time. Unfortunately, most of the time it is very difficult to know to what extent you are inhibiting your emotions. One very helpful set of practices involves stopping resistance to unpleasant emotions. This can be done through targeted writing prompts2, guided awareness exercises, or just sitting there and feeling. [Ref. JournalSpeak Paulina Soble, Mindbody workbook Schechter] You might also consider working with a skilled therapist or coach3.\n3. Learning to move # Understanding and processing are best done in a controlled environment. If you want this to extend to your daily life, it will be helpful to bring in aspects of the world. Including the factors that trigger the pain-generating feedback loop in the first place. This should be done with care, once you have capacity to do so. In our experience, it is very helpful to begin with gentle movement, then include smaller versions of the actions you wanted to perform, before finally integrating it wholly into your work life.\nYou do not need all of these skills to resolve pain. Many people find significant resolution from education alone (people have reported resolution from just reading reviews of a book). But in our experience gaining facility in all these skills significantly increases agency in life and often coincides with the resolution of pain [For those looking for a base rate, the closest thing we will point to is Pain Reprocessing Therapy, which found 2/3 people with long lasting moderate back pain find lasting relief after following their program for four weeks. Our protocol is closely inspired by theirs, but there is no study on how effective it is if you follow it yourself].\nFor those who\u0026rsquo;d enjoy more structure\nWe\u0026rsquo;ve put together a set of free self-guided practices. They walk you through the different stages of the protocol and give you much room to improvise and create your own version. Just check the box in the form here.\nThis November, we are running small cohorts to implement the pain debugging protocol in their lives. There\u0026rsquo;s room for 9 people. Read more here.\nAdditional resources\nThere are many guides to pain and many different practices for resolving pain. We have experimented with many of these and referred to what we feel are the most compelling for a wide range of people. We invite you also to explore and let us know what you find!\nPhysiotherapist Greg Lehman has a free pain guidebook. The Pain Management Workbook Pain Reprocessing Therapy\u0026rsquo;s The Way Out Shinzen Young\u0026rsquo;s Break Through Pain A large enough codebase, like the human being, also has the properties of a complex system.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nNichole Sachs\u0026rsquo; JournalSpeak and Kevin Viner\u0026rsquo;s The Mindbody Syndrome: A Path to Recovery and Freedom have good exercises.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThere is very high variance in terms of the effectiveness of the practitioner, so it may take time to find the right fit. We\u0026rsquo;ve found good practitioners associated with Pain Reprocessing Therapy and Coherence Therapy, and we (Max and Tanner) also work with people.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":4,"href":"/docs/main_posts/understand/evidence/","title":"Evidence","section":"Understand","content":" Evidence Page # This page collects a broad range of evidence about chronic pain, and how it can be resolved. It includes scientific papers but also individual case studies from real people.\nPain resolution is possible without drugs or surgery # Different non-physical therapies can permanently relieve pain # People with chronic back pain (median ~10 years) experienced major reduction from education and sensory recalibration practices (5/10 pain to 0.5/10). Treatment took 4 weeks of treatment and effects persisted after the 1 year follow up. (Ashar et al. 2021)\nPsychophysiologic symptom relief therapy (PSRT) similarly shown to eliminate chronic pain in 64% of the participants in a pilot RCT at Harvard Medical School (Donnino et al., 2021)\nShowing amputees a mirrored image of their limb reduces their phantom limb pain in many cases. (Moseley 2006, Finn et al. 2017)\nNotable Individual Cases # Many of these cases refer specifically to the work of Dr John Sarno, a surgeon at NYU who popularized the idea that many forms of chronic pain were not due to structural damage in the body. What follows are the accounts of many individuals whose pain was resolved through altering their understanding of pain.\nFrom the founder of Stripe\nFrom founder/programmer Aaron Iba\nFrom noted CSS developer Josh Comeau\nOther various interesting anecdotes: Quora / Facebook co-founder Adam D\u0026rsquo;Angelo sponsors Donnino\u0026rsquo;s pilot, which is inspired by John Sarno\u0026rsquo;s work. Jim O\u0026rsquo;Shaughnessy (investor) Celebrities Howard Stern and Larry David You can find hundreds of compelling stories on internet forums, Amazon reviews, and YouTube. Pain is not damage # Many People Have Damage Without Pain # In a landmark 1994 study of 98 pain-free people, over half had spinal disk abnormalities, showing that structural issues often exist without causing pain. (Jensen et al., 1994) 96% of pain-free young athletes showed spinal abnormalities including disc degeneration and arthropathy in detailed imaging. (Rajaswaran et al., 2014) 57% of pain-free adults aged 20-50 had cartilage defects in their hips, demonstrating that structural changes don\u0026rsquo;t necessarily cause pain. (Tresch et al., 2016) 23% of people without any shoulder pain had complete rotator cuff tears visible on imaging. (Tempelhof et al., 1999) Many People Have Pain Without Damage # About 80% of amputees experience phantom limb pain, feeling intense pain in limbs that no longer exist, years after tissue has fully healed. (Limakatso et al. 2019) Over 550 million people worldwide experience lower back pain that cannot be explained by any structural abnormality or disease. (World Health Organization) Conditions like fibromyalgia demonstrate how chronic pain can exist without identifiable tissue damage. (Clauw, 2014) A note on interpreting evidence # As many have noted, scientific studies take care to interpret. Many studies do not replicate. Indeed, the studies here are suggestive but not conclusive. Yet we still have to decide what to do about our condition. What do we do in light of this?\nI suggest that, when the issue is your own health (rather than population-level guidelines), you will benefit from taking a different lens than the maximally skeptical scientist.\nRather than asking, \u0026ldquo;must I believe this?\u0026rdquo; and then discarding everything underneath that bar, I suggest a more helpful perspective is \u0026ldquo;could this be helpful?\u0026rdquo; — then collecting different interventions and prioritizing them based on their cost.\nWhen we ask \u0026ldquo;could this be helpful?\u0026rdquo;, we can use anecdotes and informal reviews as evidence to form hypotheses. Then we can try the lowest-cost and highest-return experiments and see what empirically works in our own situations.\nHelpful additional resources for pain resolution # There are dozens of books on the topic of pain resolution. Having heard from both clients, friends, and strangers, here are the books that others have Having read many of them, those that others have found the most helpful are:\nDr John Sarno\u0026rsquo;s Healing Back Pain and The Mindbody Prescription, and Alan Gordon\u0026rsquo;s The Way Out. Shinzen Young\u0026rsquo;s Break Through Pain provides helpful meditative guidance for working with pain. Todd Hargroves\u0026rsquo; A Guide to Better Movement provides a fairly up to date summary of models of pain along with movements that might be helpful. Pain Reprocessing Therapy center has coaches that can work 1-1 with you (I was certified through their training program). Some have found the Curable app to be helpful. Of course, if you haven\u0026rsquo;t already, I would recommend also looking at the other resources on this site: Pain Debugging Protocol and especially the Pain Debugging Protocol. It provides a larger structure to understand how many of the other interventions fit into the resolution of pain.\nGot anything you\u0026rsquo;d like to add? You can submit a PR at our Github Repo, or email me at maxkshen[at]gmail.\n"},{"id":5,"href":"/docs/main_posts/about/","title":"About","section":"Docs","content":" About # Hi, I\u0026rsquo;m Max Shen, the creator of DebugYourPain.org.\nI built this site because it took me hundreds of hours of careful searching to find the information that helped me resolve my chronic pain. This site is what I wish I had at the start of my experience with pain.\nI\u0026rsquo;ve got two degrees from MIT and have worked at both Moral Psychology Research Lab at Harvard, and the Computational Cognitive Science Lab at MIT. After experiencing extensive chronic pain during my graduate program, my focus shifted to understanding and ultimately resolving my pain.\nNow, as a pain researcher, I try to articulate the dynamics of pain using everything ranging from active inference to phenomenological interviews. As a practitioner, I use this knowledge to create self-guided practices that aim to bring lasting relief from chronic pain.\nI\u0026rsquo;m trained in Pain Reprocessing Therapy, a modality using awareness to recalibrate the nervous system, and care deeply about equipping people with the skills and knowledge to relieve themselves from pain.\nI built this site with my friend and colleague Tanner Holman, whose deep knowledge of physiology and movement complements my own technical perspective.\nYou can email me at maxkshen[at]gmail[dot]com.\nI went from \u0026lsquo;cannot type\u0026rsquo; to daily handstands.\n"},{"id":6,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":7,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":8,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":9,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":10,"href":"/posts/cohort_nov24/","title":"◑ Pain Debugging Intensive","section":"Blog","content":" A 30 day intensive to debug your pain. Go from stuck and frustrated in pain to light and moving freely with a supportive cohort.\n🗓 1 month. November 16th - December 14th, 2024\n🗺 Location: Online (register interest here). Space limited.\n💰 $Pay if results (see FAQ)\nWhy This Works # Most pain treatment follows a mechanical model: find the \u0026ldquo;broken\u0026rdquo; part and fix it. But modern neuroscience reveals that chronic pain is more like a software bug than a hardware problem - it\u0026rsquo;s often a miscalibrated prediction system, not tissue damage.\nKey research backing this approach:\nAshar et al. (2022) demonstrated 67% recovery rate in chronic back pain patients after 4 weeks Our pilot sessions have shown similar results across various pain conditions (RSI, chronic back pain, neck pain) Built on established principles of the neuroscience of pain, predictive processing, and evolutionary biology Program Structure # Core Components\nUnderstanding: Map your pain patterns using tools from systems thinking and neuroscience Processing: Evidence-based techniques for recalibrating pain responses Integration: Practical strategies for maintaining progress under real-world conditions Format\n9 live sessions (3x week 1, 2x weeks 2-4) Daily guided practice materials 1:1 support as needed Small cohort (max 9 participants) Prerequisites # [Suggested] You are familiar with our Principles of Pain and are intrigued by the Pain Debugging Protocol and would like a more structured experience.\nYou are grappling with wrist pain, backaches, or some form of persistent pain.\nYou are willing to put aside 1 hour per day for a month\nHere\u0026rsquo;s what one of our past clients says about going through our process: More on what to expect: Nine sessions total (3 in the first week, then 2 each week afterwards). Sessions are all personally led by Max Shen and Tanner Holman.\nWe have nine spaces and expect these to fill up in the next week. You can register interest here.\nRegister here Note: We will always continue to open source our knowledge and practices. This intensive is about tailoring our knowledge to your situation.\nUncertain? Send any questions to max@processing-pain.com Feel free to also book a 15-minute call here and Tanner or Max will talk with you.\nWho are you? # FAQ # Q: Pay only for results?\nHow it works:\nYou decide upfront how much you\u0026rsquo;d happily pay us if our course resulted in your pain significantly decreasing. If we think you\u0026rsquo;re a good fit, we ask you for a small refundable deposit ($60) to confirm your spot. (This signals commitment to us and yourself). At the end of the course, we send you back your deposit. If you feel like your pain significantly decreased, you pay us the amount, otherwise, it\u0026rsquo;s free. We\u0026rsquo;re confident that this works, and want to put our skin in the game.\nMost courses will charge upfront, but fail to deliver to everyone. Once the client has paid, there\u0026rsquo;s less incentive to keep them happy. We think this payment mechanism better aligns us and our clients because i) clients set reasonable prices before knowing the outcome, and ii) we will be paid only if the client is satisfied.\nQ: Why a whole hour per day?\nWe are trying to unlearn habits. 1 hour is 4% of a day. We need to use it wisely if we want to lead to lasting shifts. It is important that this hour is not sandwiched between two otherwise busy periods, but that it happens before or after a normal working period.\n"}]